{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACE,0BAAMC,SARc,SAACC,GACnBA,EAAEC,iBACMJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,OAKV,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAhBS,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACrDH,GAFqB,+DAIHI,MAAMF,GAJH,cAIhBG,EAJgB,gBAKCA,EAAKC,OALN,uBAKdC,EALc,EAKdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVd,kBAafM,GAbe,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACD,yBAAKc,UAAU,0CACd,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCAKO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECLd,SAACA,GAAe,IAAD,EACbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACNxB,EAAQC,GAAWwB,MAAK,SAAAC,GACpBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIpB,CAACpB,IACKqB,EDTwBK,CAAa1B,GAAhCa,EAD0B,EAC/BN,KAAaa,EADkB,EAClBA,QAEpB,OACD,oCACC,wBAAIJ,UAAU,yBAAyBhB,GACtCoB,GAAW,uBAAGJ,UAAU,uBAAb,cACZ,yBAAKA,UAAU,aACbH,EAAOJ,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eACCiB,IAAKjB,EAAIC,IACLD,UEdEkB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAG9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQS,EAAWe,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,UAAWA,UCXvC6B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.ea3674e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInpuChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubtmit = (e) => {\r\n        e.preventDefault();\r\n            if (inputValue.trim().length > 2){\r\n            setCategorias(categorias => [inputValue,...categorias]);\r\n            setInputValue('');    \r\n        }\r\n    }\r\n    return (\r\n\t\t    <form onSubmit={handleSubtmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInpuChange} />\r\n                    {/*para que registre el cambio insertado en el input*/}\r\n\t\t\t</form>\r\n\t\t);\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired,\r\n};","export const getGifs = async (categoria) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategoria\r\n\t)}&api_key=DywfoYj09V6O9ukqOiijEYFPAzqgP3SY&limit=10`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\treturn gifs;\r\n\t\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    //console.log(id,title,url)\r\n    return (\r\n\t\t\t<div className='card animate__animated animate__fadeIn'>\r\n\t\t\t\t<img src={url} alt={title} />\r\n\t\t\t\t<p>{title}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n// , { useState, useEffect }\r\n\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n    const {data:images, loading} = useFetchGifs(categoria);\r\n\r\n    return (\r\n\t\t\t<>\r\n\t\t\t\t<h3 className=\"card animate__ fadeIn\">{categoria}</h3>\r\n\t\t\t\t{loading && <p className=\"card animate__flash\">Loading...</p>}\r\n\t\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t\t<GifGridItem\r\n\t\t\t\t\t\t\tkey={img.id}\r\n\t\t\t\t\t\t\t{...img}\r\n\t\t\t\t\t\t\t//{..img} exporta todas las propiedades del parametro img\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n}\r\n","import { useState, useEffect } from 'react'; \r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    \r\n    useEffect(() => {\r\n        getGifs(categoria).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        });\r\n        \r\n\t\t}, [categoria]);\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categorias, setCategorias] = useState(['One punch']);\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2> \r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    categorias.map((categoria) =>(\r\n                        <GifGrid\r\n                            key={categoria}\r\n                            categoria={categoria} />))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}